// Generated by CoffeeScript 1.4.0
(function() {
  var Schema, crypto, hashPass, mongoose, setPass, userSchema;

  mongoose = require("mongoose");

  crypto = require("crypto");

  Schema = mongoose.Schema;

  setPass = function(value) {
    var pass, salt;
    salt = "anyRandomSaltValue";
    this.set("salt", salt);
    pass = hashPass(value + salt);
    return pass;
  };

  hashPass = function(value) {
    return crypto.createHash("sha1").update(value).digest("HEX");
  };

  userSchema = new Schema({
    name: {
      type: String,
      required: true
    },
    email: {
      type: String,
      required: true,
      unique: true
    },
    pass: {
      type: String,
      required: true,
      set: setPass
    },
    salt: {
      type: String,
      required: true
    }
  });

  userSchema.method({
    validatePass: function(senha) {
      var passSha, salt;
      salt = this.get("salt");
      passSha = hashPass(senha + salt);
      return passSha === this.get("senha");
    }
  });

  userSchema["static"]({
    findByEmail: function(email, success, error) {
      return this.findOne({
        email: email
      }, function(e, o) {
        if (e) {
          if (error) {
            return error(e);
          }
        } else {
          if (success) {
            return success(o);
          }
        }
      });
    }
  });

  module.exports = mongoose.model("User", userSchema);

}).call(this);
