// Generated by CoffeeScript 1.4.0
(function() {
  var algorithmCipher, crypto, keyCipher, sys;

  crypto = require("crypto");

  sys = require("sys");

  algorithmCipher = "aes256";

  keyCipher = "gGHF45$%fgfsdD&*l13kj13@#s859df__jh5k";

  module.exports = {
    sha1: function(str, iterations) {
      var i, shaOne;
      if (typeof str !== "string") {
        str = str.toString();
      }
      if (typeof iterations === "undefined") {
        iterations = 0;
      }
      shaOne = crypto.createHash("sha1").update(str).digest("HEX");
      i = 0;
      while (i < iterations) {
        shaOne = crypto.createHash("sha1").update(shaOne).digest("HEX");
        i++;
      }
      return shaOne;
    },
    saltGenerate: function() {
      return this.sha1(new Date(), 10);
    },
    sessionTokenGenerate: function(req) {
      var ip_address, key, keys, ret, _i, _len;
      ip_address = null;
      try {
        ip_address = req.headers["x-real-ip"];
      } catch (error) {
        ip_address = req.connection.remoteAddress;
      }
      keys = [req.headers.origin, req.headers["user-agent"], req.headers.referer];
      ret = "";
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        ret += key;
      }
      return this.sha1(ret);
    },
    cifrar: function(str) {
      var cipher;
      cipher = crypto.createCipher(algorithmCipher, keyCipher);
      return cipher.update(str, "utf8", "hex") + cipher.final("hex");
    },
    decifrar: function(cript) {
      var decipher;
      decipher = crypto.createDecipher(algorithmCipher, keyCipher);
      return decipher.update(cript, "hex", "utf8") + decipher.final("utf8");
    }
  };

}).call(this);
