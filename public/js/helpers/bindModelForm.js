// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["underscore", "backbone", "jquery", "helpers/message", "enums/messageType"], function(_, Backbone, $, MsgHelper, MsgType) {
    var BindModelForm;
    BindModelForm = (function() {

      function BindModelForm(model) {
        this.model = model;
      }

      BindModelForm.prototype.fetchForm = function(id, exceptions) {
        var _this = this;
        if (!id) {
          return;
        }
        this.model.set("_id", id);
        return this.model.fetch({
          success: function(model) {
            var key, value, _ref, _results;
            _ref = model.attributes;
            _results = [];
            for (key in _ref) {
              value = _ref[key];
              if (exceptions && __indexOf.call(exceptions, key) >= 0) {
                continue;
              }
              _results.push($("input[name=" + key + "]").val(value));
            }
            return _results;
          }
        });
      };

      BindModelForm.prototype.saveForm = function() {
        var attr, newModel;
        $(".error").removeClass("error");
        $(".help-inline").detach();
        newModel = {};
        for (attr in this.model.attributes) {
          if ($("input[name=" + attr + "]").length) {
            newModel[attr] = $("input[name=" + attr + "]").val();
          }
        }
        if (!Object.keys(newModel).length) {
          return;
        }
        this.model.set(newModel);
        return this.saveModel();
      };

      BindModelForm.prototype.saveModel = function() {
        return this.model.save(undefined, {
          wait: true,
          success: function(model, response) {
            return MsgHelper.show("Usu√°rio registrado com sucesso.", MsgType.sucesso);
          },
          error: function(model, error) {
            var err, errors;
            if (!error.responseText) {
              return;
            }
            err = JSON.parse(error.responseText);
            if (err.errors) {
              errors = _.map(err.errors, function(val, prop) {
                return val;
              });
              return MsgHelper.validateMessages(model, errors);
            } else if (err.err) {
              return MsgHelper.show(err.err, MsgType.erro);
            }
          }
        });
      };

      return BindModelForm;

    })();
    return BindModelForm;
  });

}).call(this);
