// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(["underscore", "backbone", "jquery", "messageHelper", "enums/messageType"], function(_, Backbone, $, MsgHelper, MsgType) {
    var BaseModel;
    BaseModel = (function(_super) {

      __extends(BaseModel, _super);

      function BaseModel() {
        return BaseModel.__super__.constructor.apply(this, arguments);
      }

      BaseModel.prototype.idAttribute = "_id";

      BaseModel.prototype.fetchForm = function(id, exceptions) {
        var _this = this;
        if (!id) {
          return;
        }
        this.set("_id", id);
        return this.fetch({
          success: function(model) {
            var key, value, _ref, _results;
            _ref = model.attributes;
            _results = [];
            for (key in _ref) {
              value = _ref[key];
              if (exceptions && __indexOf.call(exceptions, key) >= 0) {
                continue;
              }
              _results.push($("input[name=" + key + "]").val(value));
            }
            return _results;
          }
        });
      };

      BaseModel.prototype.saveForm = function() {
        var attr, newModel;
        $(".error").removeClass("error");
        $(".help-inline").detach();
        newModel = {};
        for (attr in this.attributes) {
          if ($("input[name=" + attr + "]").length) {
            newModel[attr] = $("input[name=" + attr + "]").val();
          }
        }
        if (!Object.keys(newModel).length) {
          return;
        }
        this.set(newModel);
        return this.save(undefined, {
          wait: true,
          success: function(model, response) {
            console.log("sucesso save", model, response);
            return MsgHelper.show("Usu√°rio registrado com sucesso.", MsgType.sucesso);
          },
          error: function(model, error) {
            var err, errors;
            console.log("erro", model, JSON.parse(error.responseText));
            if (!error.responseText) {
              return;
            }
            err = JSON.parse(error.responseText);
            if (err.errors) {
              errors = _.map(err.errors, function(val, prop) {
                return val;
              });
              return MsgHelper.validateMessages(model, errors);
            } else if (err.err) {
              return MsgHelper.show(err.err, MsgType.erro);
            }
          }
        });
      };

      return BaseModel;

    })(Backbone.Model);
    return BaseModel;
  });

}).call(this);
